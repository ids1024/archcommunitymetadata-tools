#!/usr/bin/env python3

import os
import re
import sys
import subprocess
from pycman import config
import pyparsing
import argparse
import urllib.request
import json
import tarfile

tagdir = os.path.expanduser("~/.communitytags/")
syncurl = "git://github.com/ids1024/archcommunitytags"
pacneturl = "http://pacnet.archlinux.pl/api/packages/"
handle = config.init_with_config("/etc/pacman.conf")

operator = pyparsing.Regex("!=|=").setName("operator")
allowedchars = ''.join(set(pyparsing.printables) - set('!="()'))
text = pyparsing.Word(allowedchars) | pyparsing.QuotedString('"')
condition = pyparsing.Group((text + operator + text) | text)

expr = pyparsing.operatorPrecedence(condition, [
                            ("not", 1, pyparsing.opAssoc.RIGHT),
                            ("and", 2, pyparsing.opAssoc.LEFT),
                            ("or", 2, pyparsing.opAssoc.LEFT)
                            ])
filelist = None

class EvaluationError(Exception):
    pass

def parseMetadata():
    # This could be stored in an sqlite database for speed
    with open(tagdir + '.pacnet') as file:
        pacnet = json.load(file)
    categories = {package['name']: package['category__name']
                 for package in pacnet}
    syncpkgs = (pkg for db in handle.get_syncdbs() for pkg in db.pkgcache)
    for package in syncpkgs:
        pacmeta = {}
        pacmeta['name'] = [package.name]
        pacmeta['provide'] = package.provides
        pacmeta['depend'] = package.depends
        pacmeta['optdepend'] = package.optdepends
        pacmeta['group'] = package.groups
        pacmeta['replace'] = package.replaces
        pacmeta['conflict'] = package.conflicts
        pacmeta['license'] = package.licenses
        pacmeta['packager'] = [package.packager]
        pacmeta['url'] = [package.url or '']
        pacmeta['desc'] = [package.desc]
        pacmeta['repo'] = [package.db.name]
        pacmeta['category'] = [categories.get(package.name, 'No')]
        pacmeta['tag'] = []
        if package.name in os.listdir(tagdir):
            with open(tagdir + package.name) as file:
                for line in file:
                    tag = line.split('#')[0].strip()
                    if not tag:
                        continue
                    pacmeta['tag'].append(tag)
        yield package.name, pacmeta

def sync():
    if not os.path.exists(tagdir):
        returnval = subprocess.call(["git", "clone", syncurl, tagdir])
    else:
        returnval = subprocess.call(["git", "-C", tagdir, "pull"])
    if returnval != 0:
        print("Error: git returned nonzero exit status")
        sys.exit(1)
    origdir = os.getcwd()
    os.chdir(tagdir)
    print("Getting file lists from sync dbs...")
    filelist = {}
    for db in handle.get_syncdbs():
        filename = db.servers[0] + '/' + db.name + '.files'
        print(filename)
        try:
            files = urllib.request.urlopen(filename)
            tar = tarfile.open(mode='r:gz', fileobj=files)
            filelist.update({i.name.rsplit('-', 2)[0]:
                             tar.extractfile(i).read().decode().splitlines()[1:]
                             for i in tar if i.name.endswith('/files')})
            tar.close()
        except urllib.error.HTTPError:
            print("Unable to find file list for repo " + db.name + ": Skipping")
    with open('.filelist', 'w') as file:
        json.dump(filelist, file)
    print("Syncing with pacnet...")
    pacnetdata = urllib.request.urlopen(pacneturl).read().decode()
    with open('.pacnet', 'w') as file:
        file.write(pacnetdata)
    os.chdir(origdir)

def evaluateExpr(pacmeta, tokens, regex):
    if len(tokens) == 1 and isinstance(tokens[0], str):
        return (tokens[0] in pacmeta) and pacmeta[tokens[0]]
    if len(tokens) == 1:
        return evaluateExpr(pacmeta, tokens[0], regex)
    if len(tokens) == 2 and tokens[0] == 'not':
        return not evaluateExpr(pacmeta, tokens[1], regex)

    operator = tokens[1]
    if operator in ('and', 'or'):
        values = (i if isinstance(i, bool) else
                  evaluateExpr(pacmeta, i, regex)
                  for i in tokens[::2]) # All but operators
        return ((operator == 'and' and all(values)) or
                (operator == 'or' and any(values)))
    elif operator in ('=', '!='):
        global filelist
        pacvalues = pacmeta.get(tokens[0], ())
        if tokens[0] == 'file':
            if not filelist:
                with open(tagdir + '.filelist') as file:
                    filelist = json.load(file)
            pacvalues = filelist.get(pacmeta['name'][0])
        if regex:
            match = any(re.match(tokens[2], i) for i in pacvalues)
        else:
            match = tokens[2] in pacvalues
        return (operator == '=' and match) or (operator == '!=' and not match)
    else:
        # This code should never be reached; raise exception if it is
        raise EvaluationError


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
            description='Package tags provided by the community')
    parser.add_argument('--sync', action='store_true',
            help='synchronize with server')
    parser.add_argument('-r', '--regex', action='store_true',
            help='support regular expressions in search')
    parser.add_argument('query', nargs='?', default='')
    args = parser.parse_args()

    if args.sync:
        sync()
        sys.exit(0)
    if not os.path.exists(tagdir):
        print("Metadata directory does not exist: running initial sync")
        sync()
    packages = parseMetadata()
    if not args.query:
        # Display all packages by default
        matches = (package for package, pacmeta in packages)
    else:
        try:
            tree = expr.parseString(args.query, parseAll=True)
        except pyparsing.ParseException as e:
            print("Error parsing query at column " + str(e.col))
            sys.exit(1)
        matches = (package for package, pacmeta in packages
                   if evaluateExpr(pacmeta, tree, args.regex))
    for i in matches:
        print(i)
