#!/usr/bin/env python3

import shlex
import os
import sys
import subprocess
from pycman import config
import pyparsing

metadir = os.path.expanduser("~/.communitymeta/")
handle = config.init_with_config("/etc/pacman.conf")

operator = pyparsing.Regex("!=|=").setName("operator")
text = pyparsing.Word(pyparsing.alphanums + '-_')
condition = pyparsing.Group(text + operator + text)

expr = pyparsing.operatorPrecedence(condition,[
                            ("not", 1, pyparsing.opAssoc.RIGHT, ),
                            ("and", 2, pyparsing.opAssoc.LEFT, ),
                            ("or", 2, pyparsing.opAssoc.LEFT, ),
                            ])

def parseMetadata():
    # This could be stored in an sqlite database for speed
    packages = []
    syncpkgs = [pkg for db in handle.get_syncdbs() for pkg in db.pkgcache]
    for package in syncpkgs:
        pacmeta = {}
        pacmeta['provide'] = package.provides
        pacmeta['depend'] = package.depends
        pacmeta['optdepend'] = package.optdepends
        pacmeta['group'] = package.groups
        pacmeta['replace'] = package.replaces
        pacmeta['conflict'] = package.conflicts
        pacmeta['license'] = package.licenses
        pacmeta['packager'] = [package.packager]
        pacmeta['repo'] = [package.db.name]
        if package.name in os.listdir(metadir):
            with open(metadir + package.name) as file:
                for line in file:
                    columns = shlex.split(line)
                    if not columns:
                        continue
                    pacmeta[columns[0]] = columns[1:]
        packages.append((package.name, pacmeta))
    return packages

def sync():
    if not os.path.exists(metadir):
        subprocess.call(["git", "clone",
            "git://github.com/ids1024/archcommunitymetadata", metadir])
    else:
        origdir = os.getcwd()
        os.chdir(metadir)
        subprocess.call(["git", "pull"])
        os.chdir(origdir)

def evaluateExpr(pacmeta, tokens):
    if len(tokens) == 2 and tokens[0] == 'not':
        return not evaluateExpr(pacmeta, tokens[1])
    if isinstance(tokens[0], (str, bool)):
        left = tokens[0]
    else:
        left = evaluateExpr(pacmeta, tokens[0])
    if isinstance(tokens[2], (str, bool)):
        right = tokens[2]
    else:
        right = evaluateExpr(pacmeta, tokens[2])

    if tokens[1] == '=!':
        if right not in pacmeta.get(left, ()):
            return True
    elif tokens[1] == '=':
        if right in pacmeta.get(left, ()):
            return True
    elif tokens[1] == 'and':
        if left and right:
            return True
    elif tokens[1] == 'or':
        if left or right:
            return True
    return False


if __name__ == "__main__":
    if len(sys.argv) > 1 and sys.argv[1] == "--sync":
        sync()
        sys.exit(0)
    packages = parseMetadata()
    params = []
    tree = expr.parseString(sys.argv[1])[0]
    for package, pacmeta in packages:
        if evaluateExpr(pacmeta, tree):
            print(package)
